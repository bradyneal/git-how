#!/usr/bin/env python3

from argparse import ArgumentParser
from sys import argv, exit
from os.path import join
import json

TOOL_DESC = "Provides information regarding how to use git in specific " \
            "ways and allows user to easily add to that information"
TOOL_NAME = "githow"

SUBCOMMANDS = ["branching", "config", "create", "github",
               "history", "shorthand", "stash", "undo", "unix"]

SUBPARSER_TITLE = "subcommands"
SUBPARSER_DESC = "Allow reading of and appending to corresponding help files"
SUBPARSER_HELP = "read usage: <subcommand>; " \
                 "edit usage: <subcommand> -a [new help message]"
SUBPARSER_APPEND_HELP = "append to help file"

HELP_FOLDER = "help_files/"
# change this
PATH_TO_APP = "/Users/brady/RC/git-how"
SUBCOMMANDS_FILE = "subcommands.json"

subcommand_to_help = {}


def print_all():
    """Print the full git help text."""
    print("")
    for filename in subcommand_to_help.keys():
        print_file(filename)


def print_file(filename):
    """Print the file header and the contents of the help file."""
    with open(build_help_path(filename), 'r') as f:
        print(f.read())


def append_to_help_file(filename, message):
    """Append the message to the end of the file."""
    message = " ".join(message)
    confirmed = None
    while confirmed is None:
        confirmed = process_yes_no_response(input(
            'Are you sure you want to append "' + message +
            '" to the ' + filename + ' file? (y/n): '))
    if confirmed:
        with open(build_help_path(filename), 'a') as f:
            f.write(message + "\n")
            print('appended "' + message + '"' +
                  " to " + filename + " file")


def process_yes_no_response(response):
    """
    Return True if the response is affirmative,
    False if the response is negative,
    or None if the response is neither affirmative nor negative.
    """
    response = response.lower()
    affirmative = ["yes", "y"]
    negative = ["no", "n"]
    if response in affirmative:
        return True
    if response in negative:
        return False


def build_path(relative_path):
    """Build the absolute path to the file in the git-how folder."""
    return join(PATH_TO_APP, relative_path)


def build_help_path(help_file):
    """Build the absolute path to the specified help file."""
    return build_path(join(HELP_FOLDER, help_file))


def add_subparsers(parser):
    """Add all of the subcommand subparsers."""
    subparsers = parser.add_subparsers(title=SUBPARSER_TITLE,
                                       description=SUBPARSER_DESC,
                                       help=SUBPARSER_HELP)

    for subcommand, help_message in sorted(subcommand_to_help.items()):
        subparser = subparsers.add_parser(subcommand, help=help_message)
        subparser.set_defaults(filename=subcommand)
        subparser.add_argument("-a", "--append", nargs="+",
                               dest="message", help=SUBPARSER_APPEND_HELP)


def parse_args(args):
    """Parse the command-line arguments and return the result."""
    parser = ArgumentParser(description=TOOL_DESC, prog=TOOL_NAME)
    parser.add_argument("-a", "--all", action='store_true',
                        help="show all git help files")
    parser.add_argument("-n", "--new", nargs=2,
                        metavar=("SUBCOMMAND", "HELP_MESSAGE"),
                        help="add a new subcommand")
    add_subparsers(parser)

    # defaults to help message
    if len(args) == 0:
        parser.print_help()
        exit(0)

    return vars(parser.parse_args(args))


def load_subcommands():
    """Load the subcommands and help messages from a json."""
    global subcommand_to_help
    with open(build_path(SUBCOMMANDS_FILE)) as f:
        subcommand_to_help = json.load(f)


def add_subcommand(subcommand, help_message):
    """
    Create the new subcommand file, and
    add the subcommand and help message to the subcommands json.
    """
    subcommand_to_help[subcommand] = help_message
    open(build_help_path(subcommand), 'a').close()
    with open(build_path(SUBCOMMANDS_FILE), 'w') as f:
        f.write(json.dumps(subcommand_to_help, sort_keys=True,
                           indent=4, separators=(',', ': ')))


if __name__ == '__main__':
    load_subcommands()
    parsed = parse_args(argv[1:])
    if parsed['all']:
        print_all()
    elif parsed['new']:
        add_subcommand(*parsed['new'])
    elif parsed['message']:
        append_to_help_file(parsed['filename'], parsed['message'])
    else:
        print_file(parsed['filename'])